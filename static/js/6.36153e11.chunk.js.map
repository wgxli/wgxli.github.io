{"version":3,"sources":["pages/Blog/posts/2020-08-01-kernel-averaging/intro.js","pages/Blog/posts/util.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_util_js__WEBPACK_IMPORTED_MODULE_1__","a","createElement","Fragment","id","d","ResponsiveImage","Footnotes","Footnote","Ref","_ref","desktopSource","mobileSource","alt","src","className","_ref2","children","_ref3","href","concat","_ref4"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,KAKeE,EAAA,mBACX,OAAOE,EAAAG,EAAAC,cAAAJ,EAAAG,EAAAE,SAAA,KACHL,EAAAG,EAAAC,cAAA,mEACAJ,EAAAG,EAAAC,cAAA,+UACAJ,EAAAG,EAAAC,cAAA,gQAAuPJ,EAAAG,EAAAC,cAACF,EAAA,EAAD,CAAKI,GAAI,IAAhQ,+DAA8T,mBAA9T,8CCTRV,EAAAW,EAAAT,EAAA,sBAAAU,IAAAZ,EAAAW,EAAAT,EAAA,sBAAAW,IAAAb,EAAAW,EAAAT,EAAA,sBAAAY,IAAAd,EAAAW,EAAAT,EAAA,sBAAAa,IAAA,IAAAZ,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAH,EAAA,KAIA,SAASY,EAATI,GAA6D,IAAnCC,EAAmCD,EAAnCC,cAAeC,EAAoBF,EAApBE,aAAcC,EAAMH,EAANG,IACnD,OAAOf,EAAAG,EAAAC,cAAAJ,EAAAG,EAAAE,SAAA,KACHL,EAAAG,EAAAC,cAAA,OAAKY,IAAKH,EAAeI,UAAU,UAAUF,IAAKA,IAClDf,EAAAG,EAAAC,cAAA,OAAKY,IAAKF,EAAcG,UAAU,SAASF,IAAKA,KAKxD,SAASN,EAATS,GAA+B,IAAXC,EAAWD,EAAXC,SAChB,OAAOnB,EAAAG,EAAAC,cAAA,WAASa,UAAU,aACtBjB,EAAAG,EAAAC,cAAA,WACAJ,EAAAG,EAAAC,cAAA,uBACAJ,EAAAG,EAAAC,cAAA,UACKe,IAKb,SAAST,EAATU,GAAkC,IAAfD,EAAeC,EAAfD,SAAUb,EAAKc,EAALd,GACzB,OAAON,EAAAG,EAAAC,cAAA,UACHJ,EAAAG,EAAAC,cAAA,QAAMa,UAAU,SAAhB,IAA0BX,EAA1B,KACCa,EACDnB,EAAAG,EAAAC,cAAA,KAAGa,UAAU,mBAAmBI,KAAI,cAAAC,OAAgBhB,IAApD,UACAN,EAAAG,EAAAC,cAAA,QAAMa,UAAU,SAASX,GAAE,YAAAgB,OAAchB,MAIjD,SAASK,EAATY,GAAmB,IAALjB,EAAKiB,EAALjB,GACV,OAAON,EAAAG,EAAAC,cAAA,KACHa,UAAU,YACVI,KAAI,aAAAC,OAAehB,IAEnBN,EAAAG,EAAAC,cAAA,eAAOE,EAAP,KACAN,EAAAG,EAAAC,cAAA,QAAMa,UAAU,SAASX,GAAE,aAAAgB,OAAehB","file":"static/js/6.36153e11.chunk.js","sourcesContent":["import React from 'react';\n\nimport {Ref} from '../util.js';\n\n\nexport default function() {\n    return <>\n        <p>How do you average (or sum) a lot of numbers, quickly?</p>\n        <p>More precisely, how do you do this on a webpage, preferably in real-time, when your values are stored as pixels in a large image? In general-purpose applications, we have access to the massive parallelization capabilities of GPUs with CUDA or OpenCL — but on the web, we’re stuck with WebGL and fragment shaders.</p>\n        <p>One possibility is to write a fragment shader that repeatedly downscales the image by a factor of 2, where each output pixel is the average of the four pixels in its preimage. Assuming each render takes constant time due to GPU parallelization,<Ref id={1}/> this technique can average an \\(n \\times n\\) texture in {'\\\\(\\\\log_2{n}\\\\)'} time.</p>\n    </>;\n}\n","import React from 'react';\n\nimport './footnotes.css';\n\nfunction ResponsiveImage({desktopSource, mobileSource, alt}) {\n    return <>\n        <img src={desktopSource} className='desktop' alt={alt}/>\n        <img src={mobileSource} className='mobile' alt={alt}/>\n    </>;\n}\n\n\nfunction Footnotes({children}) {\n    return <section className='footnotes'>\n        <hr/>\n        <h2>Footnotes</h2>\n        <ol>\n            {children}\n        </ol>\n    </section>;\n}\n\nfunction Footnote({children, id}) {\n    return <li>\n        <span className='label'>[{id}]</span>\n        {children}\n        <a className='reference return' href={`#reference-${id}`}>↩</a>\n        <span className='anchor' id={`footnote-${id}`}/>\n    </li>;\n}\n\nfunction Ref({id}) {\n    return <a\n        className='reference'\n        href={`#footnote-${id}`}\n    >\n        <sup>[{id}]</sup>\n        <span className='anchor' id={`reference-${id}`}/>\n    </a>;\n}\n\nexport {\n    ResponsiveImage,\n    Footnotes, Footnote, Ref,\n};\n"],"sourceRoot":""}