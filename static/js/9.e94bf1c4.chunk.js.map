{"version":3,"sources":["pages/Blog/posts/2020-08-01-kernel-averaging/figures/PiComputer/build/frag.js","pages/Blog/posts/2020-08-01-kernel-averaging/figures/PiComputer/build/vert.js","pages/Blog/posts/2020-08-01-kernel-averaging/figures/PiComputer/util.js","pages/Blog/posts/2020-08-01-kernel-averaging/figures/PiComputer/render.js","pages/Blog/posts/2020-08-01-kernel-averaging/figures/PiComputer/index.js"],"names":["build_frag","build_vert","context","canvas","gl","width","height","current","next","program","framebuffer","uniforms","state","createShader","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","deleteShader","initTexture","contents","texture","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA","UNSIGNED_BYTE","Uint8Array","setState","name","value","uniform1f","initGL","getContext","vert","VERTEX_SHADER","vertexShader","frag","FRAGMENT_SHADER","fragmentShader","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","getProgramInfoLog","deleteProgram","positionAttr","getAttribLocation","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribPointer","FLOAT","bufferData","Float32Array","STATIC_DRAW","createScreen","createFramebuffer","_arr","Object","entries","_i","length","_ref3","_ref2","slicedToArray","key","getUniformLocation","resolution","createUniforms","onResize","dpr","window","devicePixelRatio","newWidth","innerWidth","setAttribute","viewport","uniform2f","doResize","reset","encode","Math","max","min","output","pixel","floor","push","i","y","x","isInCircle","u","v","hypot","apply","toConsumableArray","getInitialTexture","random","render","bindFramebuffer","FRAMEBUFFER","drawArrays","TRIANGLES","PiComputer","estimate","N","quality","this","pass","random_seed","addEventListener","updateValue","updateMetadata","resizeListener","bind","readPixels","decode","getValue","katex","concat","toFixed","_getMetadata","sqrt","log","getMetadata","_getMetadata2","sparsityLabel","removeEventListener","deleteTexture","deleteFramebuffer","cleanUp","_this2","_this$state","createRef","react_default","a","createElement","className","ref","Button","onClick","framebufferTexture2D","COLOR_ATTACHMENT0","step","variant","color","Slider","onChange","e","PureComponent"],"mappings":"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","file":"static/js/9.e94bf1c4.chunk.js","sourcesContent":["export default `\nprecision highp float;\n\nuniform sampler2D u_texture;\nuniform vec2 u_resolution;\n\nuniform float u_pass;\nuniform float u_random_seed;\n\nconst int N_MAX = 100;\nuniform float u_N;\n\nvarying vec2 v_texCoord;\n\n\nvec4 get_pixel(float dx, float dy) {\n    vec2 pos = v_texCoord * u_resolution + vec2(dx, dy);\n    pos.x = mod(pos.x, u_resolution.x);\n    pos.y = mod(pos.y, u_resolution.y);\n    return texture2D(\n        u_texture,\n        pos / u_resolution\n    );\n}\n\nfloat get_value(float dx, float dy) {\n    vec4 pixel = get_pixel(dx, dy) * 255.0;\n    // The 255.0 on pixel.w is intentional\n    return (pixel.x + (pixel.y + (pixel.z + pixel.w/255.0)/256.0)/256.0)/256.0;\n}\n\nvec4 encode(float value) {\n    vec4 encoded = vec4(0.0, 0.0, 0.0, 0.0);\n    for (int i = 0; i < 4; i++) {\n        value *= 256.0;\n        float pixel = floor(value);\n        value -= pixel;\n        encoded[i] = pixel/255.0;\n    }\n    // To account for rounding bias\n    encoded[3] += value/255.0;\n    return encoded;\n}\n\nfloat rand(vec2 co) {\n    return fract(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid main() {\n    if (u_pass > 0.5) {\n        // Display texture to canvas\n        gl_FragColor = vec4(get_pixel(0.0, 0.0).xxx, 1.0);\n    } else {\n        // Apply kernel\n        float value = 0.0;\n        for (int i = 0; i < N_MAX; i++) {\n            float i_float = float(i);\n            if (i_float < u_N - 0.5) {\n                float x = rand(vec2(u_random_seed, i_float)) * u_resolution.x;\n                float y = rand(vec2(u_random_seed + 1.0, i_float)) * u_resolution.y;\n                value += get_value(x, y);\n            }\n        }\n        value /= u_N;\n\n        gl_FragColor = encode(value);\n    }\n}\n`;\n","export default `\nattribute vec2 a_position;\n\nvarying vec2 v_texCoord;\n\nvoid main() {\n    v_texCoord = (a_position + 1.0) / 2.0;\n    gl_Position = vec4(a_position, 0, 1);\n}\n`;\n","import fragmentShader from './build/frag.js';\nimport vertexShader from './build/vert.js';\n\n\nlet context = {\n    canvas: null,\n    gl: null,\n\n    // Width and height of canvas in pixels\n    width: 0,\n    height: 0,\n\n    // Current and next texture\n    current: null,\n    next: null,\n\n    // Program and framebuffer\n    program: null,\n    framebuffer: null,\n\n    // Uniforms\n    uniforms: {},\n    state: {},\n}\n\n\n\nfunction doResize(width, height) {\n    const {canvas, gl, uniforms} = context;\n\n    context.width = width;\n    context.height = height;\n    canvas.setAttribute('width', width);\n    canvas.setAttribute('height', height);\n    gl.viewport(0, 0, width, height);\n    gl.uniform2f(uniforms.resolution, width, height);\n}\n\n\n\nfunction createShader(type, source) {\n    const {gl} = context;\n\n    let shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n\n    let success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (success) {return shader;}\n\n    // Log failure\n    console.error(gl.getShaderInfoLog(shader));\n    gl.deleteShader(shader);\n}\n\n\nfunction createProgram() {\n    const {gl} = context;\n\n    let vert = createShader(gl.VERTEX_SHADER, vertexShader);\n    let frag = createShader(gl.FRAGMENT_SHADER, fragmentShader);\n\n    const program = gl.createProgram();\n    context.program = program;\n\n    gl.attachShader(program, vert);\n    gl.attachShader(program, frag);\n    gl.linkProgram(program);\n\n    let success = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (success) {gl.useProgram(program);}\n\n    // Log failure\n    console.error(gl.getProgramInfoLog(program));\n    gl.deleteProgram(program);\n}\n\n\nfunction createScreen() {\n    const {gl, program} = context;\n\n    // Initialize vertex position buffers\n    let positionAttr = gl.getAttribLocation(program, 'a_position');\n    let positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n    gl.enableVertexAttribArray(positionAttr);\n    gl.vertexAttribPointer(positionAttr, 2, gl.FLOAT, false, 0, 0);\n\n    // Create two triangles covering entire canvas\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\n        -1, -1, 1, -1, -1, 1,\n        -1, 1, 1, -1, 1, 1\n    ]), gl.STATIC_DRAW);\n}\n\n\n\n// Texture initialization\nfunction initTexture(contents) {\n    const {gl, width, height} = context;\n\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n    gl.texImage2D(\n        gl.TEXTURE_2D, 0, gl.RGBA,\n        width, height, 0,\n        gl.RGBA, gl.UNSIGNED_BYTE,\n        new Uint8Array(contents)\n    );\n\n    return texture;\n}\n\n\n\n// GL Utils\nfunction createUniforms() {\n    const {gl, state, uniforms, program} = context;\n\n    // Initialize float uniforms\n    for (let [key, value] of Object.entries(state)) {\n        uniforms[key] = gl.getUniformLocation(program, 'u_' + key);\n        gl.uniform1f(uniforms[key], value);\n    }\n\n    // Initialize resolution uniform\n    uniforms.resolution = gl.getUniformLocation(program, 'u_resolution');\n}\n\nfunction setState(name, value) {\n    const {gl, state, uniforms} = context;\n    state[name] = value;\n    gl.uniform1f(uniforms[name], value);\n}\n\nfunction initGL(canvas) {\n    context.canvas = canvas;\n    context.gl = canvas.getContext('webgl');\n\n    createProgram();\n    createScreen();\n\n    context.framebuffer = context.gl.createFramebuffer();\n\n    createUniforms();\n}\n\nexport {context, initGL, setState, initTexture, doResize};\n","import {\n    context,\n    doResize,\n    initGL,\n    initTexture,\n    setState,\n} from './util.js';\n\n// Resize utility functions\nfunction onResize() {\n    const {width} = context;\n\n    const dpr = window.devicePixelRatio;\n    const newWidth = window.innerWidth > 600 ? (500 * dpr) : (300 * dpr);\n\n    if (newWidth !== width) {\n        doResize(newWidth, newWidth);\n        reset();\n    }\n}\n\n// Texture initialization\nfunction encode(value) {\n    // Encodes float value (between 0 and 1) to RGBA pixel\n    value = Math.max(Math.min(value, 1), 0);\n    const output = [];\n    while (output.length < 4) {\n        value *= 256.0;\n        let pixel = Math.min(Math.floor(value), 255);\n        value -= pixel;\n        output.push(pixel);\n    }\n    return output;\n}\n\nfunction decode(pixel) {\n    // Decodes RGBA pixel to float between 0 and 1\n    let value = 0;\n    for (let i = 3; i >= 0; i--) {\n        value += pixel[i];\n        value /= 256;\n    }\n    return value;\n}\n\nfunction getInitialTexture() {\n    const {width, height} = context;\n\n    // Initialize Leibniz terms\n    const contents = [];\n    for (let i = 0; i < width * height; i++) {\n        let y = Math.floor(i / width);\n        let x = i - (y * width);\n\n        x += 0.5;\n        y += 0.5;\n\n        const isInCircle = (u, v) => {\n            const r = Math.hypot(u/width - 0.5, v/height - 0.5);\n            return (r < 0.5) ? 1 : 0;\n        }\n\n        const value = 0.25 * (\n            isInCircle(x - 0.25, y - 0.25)\n            + isInCircle(x - 0.25, y + 0.25)\n            + isInCircle(x + 0.25, y - 0.25)\n            + isInCircle(x + 0.25, y + 0.25)\n        );\n\n        contents.push(...encode(value));\n    }\n\n    return contents;\n}\n\n\n\n// Main code\nfunction initialize(canvas) {\n    context.state = {\n        pass: null,\n        N: null,\n        random_seed: null,\n    };\n\n    initGL(canvas);\n\n    window.addEventListener('resize', onResize);\n    onResize();\n\n    setState('N', 50);\n}\n\nfunction cleanUp() {\n    const {gl} = context;\n\n    window.removeEventListener('resize', onResize);\n\n    context.canvas = null;\n    context.gl = null;\n    context.program = null;\n\n    context.width = 0;\n    context.height = 0;\n\n    gl.deleteTexture(context.current);\n    gl.deleteTexture(context.next);\n    gl.deleteFramebuffer(context.framebuffer);\n\n    context.current = null;\n    context.next = null;\n    context.framebuffer = null;\n}\n\nfunction step() {\n    const {gl, framebuffer, current} = context;\n\n    // Render to texture\n    setState('pass', 0);\n    gl.bindTexture(gl.TEXTURE_2D, current);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D, context.next, 0\n    );\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n    // Swap textures\n    context.current = context.next;\n    context.next = current;\n\n    render();\n}\n\n\nfunction reset() {\n    const contents = getInitialTexture();\n\n    context.current = initTexture(contents);\n    context.next = initTexture(contents);\n\n    setState('random_seed', Math.random());\n\n    render();\n}\n\nfunction render() {\n    const {gl, current} = context;\n\n    setState('pass', 1);\n    gl.bindTexture(gl.TEXTURE_2D, current);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n}\n\n\nfunction getValue() {\n    const {gl, framebuffer} = context;\n\n    const pixel = new Uint8Array(4);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n    gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixel);\n\n    return 4 * decode(pixel);\n}\n\nfunction getMetadata() {\n    const {width, height, state: {N}} = context;\n    const quality = Math.sqrt(N / Math.log(width * height));\n    return [width, height, N, Math.max(quality, 1)];\n}\n\nfunction setKernelSize(n) {setState('N', n);}\n\nexport {\n    initialize, step, reset,\n    cleanUp,\n    getValue, getMetadata,\n    setKernelSize\n};\n","import React, {PureComponent, createRef} from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Slider from '@material-ui/core/Slider';\n\nimport {\n    initialize, step, reset,\n    cleanUp,\n    getValue, getMetadata,\n    setKernelSize,\n} from './render.js';\nimport './index.css';\n\nclass PiComputer extends PureComponent {\n    state = {\n        estimate: 0,\n        width: 0,\n        height: 0,\n        N: 0,\n        quality: 0,\n    };\n\n    componentDidMount() {\n        initialize(this.canvas.current);\n        this.updateValue();\n        this.updateMetadata();\n\n        this.resizeListener = this.updateMetadata.bind(this);\n        window.addEventListener('resize', this.resizeListener);\n    }\n\n    updateValue() {\n        const estimate = getValue();\n        this.setState({estimate}); \n        window.katex.render(`\\\\pi \\\\approx ${estimate.toFixed(5)}...`, this.estimate.current);\n    }\n\n    updateMetadata() {\n        const [width, height, N, quality] = getMetadata();\n        this.setState({width, height, N, quality}); \n        window.katex.render(`N = ${N}`, this.sparsityLabel.current);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.resizeListener);\n        cleanUp();\n    }\n\n    render() {\n        const {width, height, N, quality} = this.state;\n\n        this.canvas = createRef();\n        this.estimate = createRef();\n        this.sparsityLabel = createRef();\n\n        return <div className='pi-computer'>\n            <p className='estimate' ref={this.estimate}></p>\n            <div className='controls'>\n                <Button\n                    onClick={() => {step(); this.updateValue();}}\n                    variant='contained'\n                    color='primary'\n                >Step</Button>\n                <Button\n                    onClick={reset}\n                    variant='outlined'\n                >Reset</Button>\n            </div>\n            <canvas ref={this.canvas}>Please enable Javascript and WebGL to use the demo.</canvas>\n            <div className='kernel-slider'>\n                <p className='header'>Kernel Sparsity</p>\n                <p className='label' ref={this.sparsityLabel}/>\n                <Slider\n                    min={3} max={100}\n                    value={N}\n                    onChange={(e, v) => {setKernelSize(v); this.updateMetadata();}}\n                />\n            </div>\n            <p className='size'>\n                Texture Size: {width} × {height}<br/>\n                Estimated Quality: Q(K) = {quality.toFixed(3)}<br/>\n            </p>\n        </div>\n    }\n}\n\nexport default PiComputer;\n"],"sourceRoot":""}