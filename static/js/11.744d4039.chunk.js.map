{"version":3,"sources":["pages/Blog/posts/2020-10-28-putnam-1981-b5/intro.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js"],"names":["__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","Fragment","String","raw","_templateObject","_templateObject2","_taggedTemplateLiteral","strings","slice","Object","freeze","defineProperties","value","__webpack_require__","d"],"mappings":"4fAGeA,EAAA,mBACX,OAAOC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACHH,EAAAC,EAAAC,cAAA,sKAEAF,EAAAC,EAAAC,cAAA,uEAA6DE,OAAOC,IAApEC,KAAA,yEACCF,OAAOC,IAJLE,yCCJI,SAAAC,EAAAC,EAAAJ,GAKf,OAJAA,IACAA,EAAAI,EAAAC,MAAA,IAGAC,OAAAC,OAAAD,OAAAE,iBAAAJ,EAAA,CACAJ,IAAA,CACAS,MAAAH,OAAAC,OAAAP,OAPAU,EAAAC,EAAAjB,EAAA,sBAAAS","file":"static/js/11.744d4039.chunk.js","sourcesContent":["import React from 'react';\n\n\nexport default function() {\n    return <>\n        <p>Here’s a nice solution of Putnam 1981 B5 that I haven’t seen anywhere else (so far). The main idea is to sum `bitwise,' rather than `termwise.'</p>\n\n        <p>Let \\(S_k\\) denote the set of positive integers with the {String.raw`\\(k^{\\text{th}}\\)`} bit set, counting from the right starting at \\(k=0\\). Then we have</p>\n        {String.raw`\\[\\sum_{n=1}^\\infty \\frac{B(n)}{n^2 + n} = \\sum_{k=0}^\\infty \\sum_{n \\in S_k} \\frac{1}{n^2 + n}.\\]`}\n    </>;\n}\n","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}"],"sourceRoot":""}