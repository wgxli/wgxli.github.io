{"version":3,"sources":["pages/Blog/posts/2020-10-28-putnam-1981-b5/intro.js"],"names":["__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","Fragment","String","raw","_templateObject","_templateObject2"],"mappings":"6hBAGeA,EAAA,mBACX,OAAOC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACHH,EAAAC,EAAAC,cAAA,uKACAF,EAAAC,EAAAC,cAAA,8EAAiEF,EAAAC,EAAAC,cAAA,iBAAjE,yEACAF,EAAAC,EAAAC,cAAA,SAAIE,OAAOC,IAAXC,MACAN,EAAAC,EAAAC,cAAA,yEAA8DE,OAAOC,IAArEE,KAAA","file":"static/js/16.12aaa765.chunk.js","sourcesContent":["import React from 'react';\n\n\nexport default function() {\n    return <>\n        <p>Here’s a nice solution of Putnam 1981 B5 that I haven’t seen anywhere else (so far). The  main idea is to sum `bitwise,' rather than `termwise.'</p>\n        <p>Let \\(S_k\\) denote the set of positive integers with the \\(k\\)<sup>th</sup> bit set, counting from the right starting at \\(k=0\\). Then we have</p>\n        <p>{String.raw`\\[\\sum_{n=1}^\\infty \\frac{B(n)}{n^2 + n} = \\sum_{k=0}^\\infty \\sum_{n \\in S_k} \\frac{1}{n^2 + n}.\\]`}</p>\n        <p>A bit of thinking shows that \\(n \\in S_k\\) if and only if {String.raw`\\(\\lfloor 2^{-k} n\\rfloor = 2m+1\\)`} is odd. Thus the sum becomes</p>\n    </>;\n}\n"],"sourceRoot":""}